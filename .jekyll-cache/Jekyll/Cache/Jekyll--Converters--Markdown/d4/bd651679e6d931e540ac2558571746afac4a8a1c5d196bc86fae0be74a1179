I"C<p>在设计接口的时候，如果返还的实例中，不想让某个实例的某个字段返还，可以将其设为<code class="language-plaintext highlighter-rouge">null</code>，然后在SpringBoot的配置文件中写上<code class="language-plaintext highlighter-rouge">spring.jackson.default-property-inclusion=non_null</code></p>

<p>返回的数据中<code class="language-plaintext highlighter-rouge">null</code>的字段就不会返回了</p>

<p>还有一种方法，直接找到对应的字段，打上<code class="language-plaintext highlighter-rouge">@JsonIgnore</code>，这样它也不会在JSON中出现。但是呢，如果你想让它在某个接口的中又需要暴露出来，那么这个方法显然不太合适</p>

<p>第一种方法太丑了，想优雅一点（偷懒</p>

<p>那么打注解通过反射在返回时给需要的字段设为<code class="language-plaintext highlighter-rouge">null</code>就行了</p>

<p>老样子搞一个注解</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">ResultIgnore</span> <span class="o">{</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="nf">value</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>拿到对象后通过反射，获取对应字段，然后设为<code class="language-plaintext highlighter-rouge">null</code>，没了（因为想修改父类私有字段，所以写丑一点无所谓，写递归2就算了</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResultIgnoreAspect</span> <span class="o">{</span>

    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">"@annotation(com.therainisme.magicwood.aspect.common.ResultIgnore)"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">thePointCut</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="nd">@AfterReturning</span><span class="o">(</span><span class="n">pointcut</span> <span class="o">=</span> <span class="s">"thePointCut()"</span><span class="o">,</span> <span class="n">returning</span> <span class="o">=</span> <span class="s">"res"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doAfterReturning</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">joinPoint</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">res</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">NoSuchFieldException</span><span class="o">,</span> <span class="nc">IllegalAccessException</span> <span class="o">{</span>
        <span class="nc">ResultIgnore</span> <span class="n">resultIgnore</span> <span class="o">=</span> <span class="o">((</span><span class="nc">MethodSignature</span><span class="o">)</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">getSignature</span><span class="o">())</span>
                <span class="o">.</span><span class="na">getMethod</span><span class="o">().</span><span class="na">getAnnotation</span><span class="o">(</span><span class="nc">ResultIgnore</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">value</span> <span class="o">:</span> <span class="n">resultIgnore</span><span class="o">.</span><span class="na">value</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">Field</span> <span class="n">field</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">field</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">}</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">field</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSuperclass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">field</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">//todo throw an exception</span>
            <span class="o">}</span>
            <span class="n">field</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
            <span class="n">field</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">res</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET